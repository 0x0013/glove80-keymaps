//////////////////////////////////////////////////////////////////////
// IMPORTANT: You need to set Firmware Version to "pr19.zephyr-3-2" //
// under Settings > Advanced Settings in the Glove80 Layout Editor! //
//////////////////////////////////////////////////////////////////////
//
// Sunaku's Layout v18 featuring Engram(mer) layout and Miryoku system
//
// https://sunaku.github.io/moergo-glove80-keyboard.html
// https://discord.com/channels/877392805654306816/1111469812850380831
//

behaviors {

    //
    // Miryoku home row mods and thumb layer keys
    // https://sunaku.github.io/home-row-mods.html
    // https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    // TYPING_STREAK_TERM defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #define TYPING_STREAK_TERM 160 // global-quick-tap-ms
    //
    // KEY_REPEATING_TERM defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #define KEY_REPEATING_TERM 300 // "tap then hold" for key auto-repeat
    //
    // HOMEY_TAPPING_TERM defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    // NOTE: the "balanced" flavor of ZMK hold-tap for home row mods already
    // provides instant modifier activation for keyboard-only usage, so this
    // setting is meant for combined keyboard/mouse usage such as mod-clicks.
    //
    #define HOMEY_TAPPING_TERM 280 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    //
    // INDEX_TAPPING_TERM defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    // NOTE: the "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // lowers the risk of accidental modifier activation since typing streaks
    // aren't enforced on them so as not to hinder their speed and dexterity.
    //
    #define INDEX_TAPPING_TERM 180
    //
    // THUMB_TAPPING_TERM defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #define THUMB_TAPPING_TERM 200
    //
    // Glove80 key positions index for positional hold-tap
    // https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    // | LEFT_HAND_MIRRORED     |    RIGHT_HAND_MIRRORED |
    // |                        |                        |
    // |  9  8  7  6  5         |          4  3  2  1  0 |
    // | 21 20 19 18 17 16      |      15 14 13 12 11 10 |
    // | 33 32 31 30 29 28      |      27 26 25 24 23 22 |
    // | 45 44 43 42 41 40      |      39 38 37 36 35 34 |
    // | 63 62 61 60 59 58      |      51 50 49 48 47 46 |
    // | 79 78 77 76 75         |         68 67 66 65 64 |
    // |                74 57   |   52 69                |
    // |                 73 56  |  53 70                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72
    //
    // Home row mod-tap keys for all except index fingers
    //
    homey_left: miryoku_home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    homey_right: miryoku_home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    //
    // Special home row mod-tap keys for the index fingers
    //
    index_left: miryoku_home_row_mods_left_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    index_right: miryoku_home_row_mods_right_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: miryoku_thumb_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_LAYER_TAP_WITH_REPEAT";
        flavor = "balanced";
        tapping-term-ms = <THUMB_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    // Shift + LEFT_PARENTHESIS = LESS_THAN
    parang_left: left_parenthesis_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "LEFT_PARENTHESIS_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // Shift + RIGHT_PARENTHESIS = GREATER_THAN
    parang_right: right_parenthesis_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PARENTHESIS_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // Shift + CapsWord = CapsLock
    cappy: capsword_and_capslock {
        compatible = "zmk,behavior-mod-morph";
        label = "CAPSWORD_AND_CAPSLOCK";
        #binding-cells = <0>;
        bindings = <&caps_word>, <&kp CAPSLOCK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // https://zmk.dev/docs/behaviors/caps-word
    // https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
    };

    //
    // Custom shifted pairs for the Engram layout
    // https://engram.dev/
    //
    one: engram_one_and_pipe {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_ONE_AND_PIPE";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp PIPE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    two: engram_two_and_equal {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_TWO_AND_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp EQUAL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    three: engram_three_and_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_THREE_AND_TILDE";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    four: engram_four_and_plus {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_FOUR_AND_PLUS";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    five: engram_five_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_FIVE_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    six: engram_six_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SIX_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    seven: engram_seven_and_caret {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SEVEN_AND_CARET";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    eight: engram_eight_and_ampersand {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_EIGHT_AND_AMPERSAND";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp AMPERSAND>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    nine: engram_nine_and_percent {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_NINE_AND_PERCENT";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp PERCENT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    zero: engram_zero_and_asterisk {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_ZERO_AND_ASTERISK";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp ASTERISK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    apos: engram_apostrophe_and_left_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_APOSTROPHE_AND_LEFT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp APOSTROPHE>, <&kp LEFT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dquote: engram_double_quotes_and_right_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_DOUBLE_QUOTES_AND_RIGHT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp DOUBLE_QUOTES>, <&kp RIGHT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    comma: engram_comma_and_semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_COMMA_AND_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMICOLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    period: engram_period_and_colon {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_PERIOD_AND_COLON";
        #binding-cells = <0>;
        bindings = <&kp PERIOD>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    question: engram_question_and_exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_QUESTION_AND_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    hash: engram_hash_and_dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_HASH_AND_DOLLAR";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    at: engram_at_and_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_AT_AND_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    slash: engram_slash_and_backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SLASH_AND_BACKSLASH";
        #binding-cells = <0>;
        bindings = <&kp SLASH>, <&kp BACKSLASH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

};

macros {

    //
    // Approximation of Pascal Getreuer's SelectWord trick from QMK
    // https://getreuer.info/posts/keyboards/select-word/index.html
    //
    select_word_right: select_word_right {
        compatible = "zmk,behavior-macro";
        label = "SELECT_WORD_RIGHT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LC(RIGHT)>
        , <&macro_wait_time 1> // let cursor move to the next word!
        , <&macro_tap &kp LC(LEFT) &kp LC(LS(RIGHT))>
        ;
    };
    extend_word_right: extend_word_right {
        compatible = "zmk,behavior-macro";
        label = "EXTEND_WORD_RIGHT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LC(LS(RIGHT))>
        ;
    };
    select_line_right: select_line_right {
        compatible = "zmk,behavior-macro";
        label = "SELECT_LINE_RIGHT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp HOME &kp LS(END)>
        ;
    };
    extend_line_right: extend_line_right {
        compatible = "zmk,behavior-macro";
        label = "EXTEND_LINE_RIGHT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LS(DOWN) &kp LS(END)>
        ;
    };
    select_word_left: select_word_left {
        compatible = "zmk,behavior-macro";
        label = "SELECT_WORD_LEFT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        /* = <&macro_tap &kp LC(RIGHT)> */
        = <&macro_tap &kp LC(LEFT)>
        , <&macro_wait_time 1> // let cursor move to the next word!
        , <&macro_tap &kp LC(RIGHT) &kp LC(LS(LEFT))>
        ;
    };
    extend_word_left: extend_word_left {
        compatible = "zmk,behavior-macro";
        label = "EXTEND_WORD_LEFT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LC(LS(LEFT))>
        ;
    };
    select_line_left: select_line_left {
        compatible = "zmk,behavior-macro";
        label = "SELECT_LINE_LEFT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp END &kp LS(HOME)>
        ;
    };
    extend_line_left: extend_line_left {
        compatible = "zmk,behavior-macro";
        label = "EXTEND_LINE_LEFT";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LS(UP) &kp LS(HOME)>
        ;
    };
    select_word: select_word {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_WORD";
        #binding-cells = <0>;
        bindings = <&select_word_right>, <&select_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    extend_word: extend_word {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_WORD";
        #binding-cells = <0>;
        bindings = <&extend_word_right>, <&extend_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    select_line: select_line {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_LINE";
        #binding-cells = <0>;
        bindings = <&select_line_right>, <&select_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    extend_line: extend_line {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_LINE";
        #binding-cells = <0>;
        bindings = <&extend_line_right>, <&extend_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

};
